<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.20.12/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white p-4 min-h-screen">
    <div id="root"></div>
    <script type="text/babel">
        const { useState } = React;

        const UserManagement = () => {
            const [users, setUsers] = useState([
                { id: 1, username: "demo", email: "demo@nearbuycart.com", countryCode: "91", phoneNumber: "9556132160", activated: true, role: "buyer" }
            ]);

            const [showForm, setShowForm] = useState(false);
            const [editingUser, setEditingUser] = useState(null);
            const [newUser, setNewUser] = useState({ username: "", email: "", countryCode: "", phoneNumber: "", activated: false, role: "" });
            const [filterText, setFilterText] = useState("");

            // Handles input change for add/edit form
            const handleInputChange = (e) => {
                const { name, value } = e.target;
                setNewUser({ ...newUser, [name]: value });
            };

            // Adds a new user
            const handleAddUser = () => {
                if (editingUser) {
                    // Edit existing user
                    setUsers(users.map(user => (user.id === editingUser.id ? { ...editingUser, ...newUser } : user)));
                    setEditingUser(null);
                } else {
                    // Add new user
                    setUsers([...users, { id: users.length + 1, ...newUser }]);
                }
                setShowForm(false);
                setNewUser({ username: "", email: "", countryCode: "", phoneNumber: "", activated: false, role: "" });
            };

            // Opens the edit form
            const handleEditUser = (user) => {
                setEditingUser(user);
                setNewUser(user);
                setShowForm(true);
            };

            // Filters users by username, email, or role
            const filteredUsers = users.filter(user =>
                user.username.toLowerCase().includes(filterText.toLowerCase()) ||
                user.email.toLowerCase().includes(filterText.toLowerCase()) ||
                user.role.toLowerCase().includes(filterText.toLowerCase())
            );

            return (
                <div>
                    <h1 className="text-xl font-bold text-center text-blue-400">All Users</h1>
                    <div className="flex justify-between my-4">
                        <button className="bg-blue-500 px-4 py-2 rounded">Back</button>
                        <div>
                            <input 
                                type="text" 
                                placeholder="Filter by name, email, role" 
                                value={filterText} 
                                onChange={(e) => setFilterText(e.target.value)}
                                className="bg-gray-700 p-2 rounded mr-2 text-white"
                            />
                            <button className="bg-blue-500 px-4 py-2 rounded" onClick={() => setShowForm(true)}>Add User</button>
                        </div>
                    </div>

                    {showForm && (
                        <div className="bg-gray-800 p-4 rounded-lg mb-4">
                            <h2 className="text-lg font-bold mb-2">{editingUser ? "Edit User" : "Add New User"}</h2>
                            <input type="text" name="username" placeholder="Username" value={newUser.username} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                            <input type="email" name="email" placeholder="Email" value={newUser.email} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                            <input type="text" name="countryCode" placeholder="Country Code" value={newUser.countryCode} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                            <input type="text" name="phoneNumber" placeholder="Phone Number" value={newUser.phoneNumber} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                            <input type="text" name="role" placeholder="Role" value={newUser.role} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                            <div className="flex gap-2">
                                <button className="bg-green-500 px-4 py-2 rounded" onClick={handleAddUser}>{editingUser ? "Update" : "Save"}</button>
                                <button className="bg-red-500 px-4 py-2 rounded" onClick={() => { setShowForm(false); setEditingUser(null); }}>Cancel</button>
                            </div>
                        </div>
                    )}

                    <div className="bg-gray-800 p-4 rounded-lg">
                        <table className="w-full text-left">
                            <thead>
                                <tr className="border-b border-gray-700">
                                    <th className="p-2">ID</th>
                                    <th className="p-2">Username</th>
                                    <th className="p-2">Email</th>
                                    <th className="p-2">Country Code</th>
                                    <th className="p-2">Phone Number</th>
                                    <th className="p-2">Activated</th>
                                    <th className="p-2">Roles</th>
                                    <th className="p-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredUsers.map(user => (
                                    <tr key={user.id} className="border-b border-gray-700">
                                        <td className="p-2">{user.id}</td>
                                        <td className="p-2">{user.username}</td>
                                        <td className="p-2">{user.email}</td>
                                        <td className="p-2">{user.countryCode}</td>
                                        <td className="p-2">{user.phoneNumber}</td>
                                        <td className="p-2">{user.activated ? "Yes" : "No"}</td>
                                        <td className="p-2">{user.role}</td>
                                        <td className="p-2">
                                            <button className="bg-green-500 px-2 py-1 mx-1 rounded">Activate</button>
                                            <button className="bg-yellow-500 px-2 py-1 mx-1 rounded" onClick={() => handleEditUser(user)}>Edit</button>
                                            <button className="bg-blue-500 px-2 py-1 mx-1 rounded">View</button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            );
        };

        ReactDOM.createRoot(document.getElementById("root")).render(<UserManagement />);
    </script>
</body>
</html>


