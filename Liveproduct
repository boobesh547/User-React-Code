<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Product Dashboard</title>

    <!-- React & ReactDOM -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>

    <!-- Babel (for JSX) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.20.12/babel.min.js"></script>

    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white p-4 min-h-screen">
    <div id="root"></div>

    <script type="text/babel">
        const { useState } = React;

        const Dashboard = () => {
            const [products, setProducts] = useState([
                { id: 1, name: "Laptop", price: 800, stock: 10 },
                { id: 2, name: "Smartphone", price: 500, stock: 15 },
                { id: 3, name: "Headphones", price: 100, stock: 20 }
            ]);

            const [newProduct, setNewProduct] = useState({ name: "", price: "", stock: "" });

            const handleInputChange = (e) => {
                const { name, value } = e.target;
                setNewProduct({ ...newProduct, [name]: value });
            };

            const addProduct = () => {
                if (!newProduct.name || !newProduct.price || !newProduct.stock) return;
                setProducts([...products, { id: products.length + 1, ...newProduct, price: Number(newProduct.price), stock: Number(newProduct.stock) }]);
                setNewProduct({ name: "", price: "", stock: "" });
            };

            const updateProduct = (id, field, value) => {
                setProducts(products.map(product => 
                    product.id === id ? { ...product, [field]: value } : product
                ));
            };

            return (
                <div className="max-w-4xl mx-auto">
                    <h1 className="text-2xl font-bold text-blue-400 text-center mb-4">Live Product Dashboard</h1>

                    <button className="bg-gray-600 px-4 py-2 rounded mb-4" onClick={() => alert('Going back!')}>â¬… Back</button>

                    <div className="bg-gray-800 p-4 rounded-lg mb-4">
                        <h2 className="text-lg font-bold mb-2">Add New Product</h2>
                        <input type="text" name="name" placeholder="Product Name" value={newProduct.name} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                        <input type="number" name="price" placeholder="Price ($)" value={newProduct.price} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                        <input type="number" name="stock" placeholder="Stock" value={newProduct.stock} onChange={handleInputChange} className="bg-gray-700 p-2 rounded w-full mb-2"/>
                        <button className="bg-green-500 px-4 py-2 rounded" onClick={addProduct}>Add Product</button>
                    </div>

                    <div className="bg-gray-800 p-4 rounded-lg">
                        <table className="w-full text-left">
                            <thead>
                                <tr className="border-b border-gray-700">
                                    <th className="p-2">ID</th>
                                    <th className="p-2">Product Name</th>
                                    <th className="p-2">Price ($)</th>
                                    <th className="p-2">Stock</th>
                                </tr>
                            </thead>
                            <tbody>
                                {products.map(product => (
                                    <tr key={product.id} className="border-b border-gray-700">
                                        <td className="p-2">{product.id}</td>
                                        <td className="p-2">{product.name}</td>
                                        <td className="p-2">
                                            <input 
                                                type="number" 
                                                value={product.price} 
                                                onChange={(e) => updateProduct(product.id, 'price', Number(e.target.value))}
                                                className="bg-gray-700 p-1 rounded w-full"
                                            />
                                        </td>
                                        <td className="p-2">
                                            <input 
                                                type="number" 
                                                value={product.stock} 
                                                onChange={(e) => updateProduct(product.id, 'stock', Number(e.target.value))}
                                                className="bg-gray-700 p-1 rounded w-full"
                                            />
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            );
        };

        ReactDOM.createRoot(document.getElementById("root")).render(<Dashboard />);
    </script>
</body>
</html>
